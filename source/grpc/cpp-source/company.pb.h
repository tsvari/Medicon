// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: company.proto
// Protobuf C++ Version: 5.29.0

#ifndef company_2eproto_2epb_2eh
#define company_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_company_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_company_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_company_2eproto;
namespace CompanyEdit {
class Company;
struct CompanyDefaultTypeInternal;
extern CompanyDefaultTypeInternal _Company_default_instance_;
class CompanyList;
struct CompanyListDefaultTypeInternal;
extern CompanyListDefaultTypeInternal _CompanyList_default_instance_;
class CompanyResult;
struct CompanyResultDefaultTypeInternal;
extern CompanyResultDefaultTypeInternal _CompanyResult_default_instance_;
class CompanyUid;
struct CompanyUidDefaultTypeInternal;
extern CompanyUidDefaultTypeInternal _CompanyUid_default_instance_;
class JsonParameters;
struct JsonParametersDefaultTypeInternal;
extern JsonParametersDefaultTypeInternal _JsonParameters_default_instance_;
class ServerUid;
struct ServerUidDefaultTypeInternal;
extern ServerUidDefaultTypeInternal _ServerUid_default_instance_;
class TotalCount;
struct TotalCountDefaultTypeInternal;
extern TotalCountDefaultTypeInternal _TotalCount_default_instance_;
}  // namespace CompanyEdit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CompanyEdit {

// ===================================================================


// -------------------------------------------------------------------

class TotalCount final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.TotalCount) */ {
 public:
  inline TotalCount() : TotalCount(nullptr) {}
  ~TotalCount() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TotalCount* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TotalCount));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TotalCount(
      ::google::protobuf::internal::ConstantInitialized);

  inline TotalCount(const TotalCount& from) : TotalCount(nullptr, from) {}
  inline TotalCount(TotalCount&& from) noexcept
      : TotalCount(nullptr, std::move(from)) {}
  inline TotalCount& operator=(const TotalCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline TotalCount& operator=(TotalCount&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TotalCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const TotalCount* internal_default_instance() {
    return reinterpret_cast<const TotalCount*>(
        &_TotalCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TotalCount& a, TotalCount& b) { a.Swap(&b); }
  inline void Swap(TotalCount* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TotalCount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TotalCount* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TotalCount>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TotalCount& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TotalCount& from) { TotalCount::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TotalCount* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.TotalCount"; }

 protected:
  explicit TotalCount(::google::protobuf::Arena* arena);
  TotalCount(::google::protobuf::Arena* arena, const TotalCount& from);
  TotalCount(::google::protobuf::Arena* arena, TotalCount&& from) noexcept
      : TotalCount(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCountFieldNumber = 1,
  };
  // uint64 count = 1;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.TotalCount)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TotalCount& from_msg);
    ::uint64_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class ServerUid final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.ServerUid) */ {
 public:
  inline ServerUid() : ServerUid(nullptr) {}
  ~ServerUid() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerUid* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerUid));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerUid(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerUid(const ServerUid& from) : ServerUid(nullptr, from) {}
  inline ServerUid(ServerUid&& from) noexcept
      : ServerUid(nullptr, std::move(from)) {}
  inline ServerUid& operator=(const ServerUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUid& operator=(ServerUid&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerUid& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUid* internal_default_instance() {
    return reinterpret_cast<const ServerUid*>(
        &_ServerUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ServerUid& a, ServerUid& b) { a.Swap(&b); }
  inline void Swap(ServerUid* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerUid* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerUid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerUid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerUid& from) { ServerUid::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerUid* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.ServerUid"; }

 protected:
  explicit ServerUid(::google::protobuf::Arena* arena);
  ServerUid(::google::protobuf::Arena* arena, const ServerUid& from);
  ServerUid(::google::protobuf::Arena* arena, ServerUid&& from) noexcept
      : ServerUid(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUidFieldNumber = 1,
  };
  // uint32 uid = 1;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.ServerUid)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerUid& from_msg);
    ::uint32_t uid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class JsonParameters final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.JsonParameters) */ {
 public:
  inline JsonParameters() : JsonParameters(nullptr) {}
  ~JsonParameters() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JsonParameters* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JsonParameters));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JsonParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline JsonParameters(const JsonParameters& from) : JsonParameters(nullptr, from) {}
  inline JsonParameters(JsonParameters&& from) noexcept
      : JsonParameters(nullptr, std::move(from)) {}
  inline JsonParameters& operator=(const JsonParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonParameters& operator=(JsonParameters&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonParameters* internal_default_instance() {
    return reinterpret_cast<const JsonParameters*>(
        &_JsonParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(JsonParameters& a, JsonParameters& b) { a.Swap(&b); }
  inline void Swap(JsonParameters* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonParameters* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JsonParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JsonParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JsonParameters& from) { JsonParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JsonParameters* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.JsonParameters"; }

 protected:
  explicit JsonParameters(::google::protobuf::Arena* arena);
  JsonParameters(::google::protobuf::Arena* arena, const JsonParameters& from);
  JsonParameters(::google::protobuf::Arena* arena, JsonParameters&& from) noexcept
      : JsonParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kJsonParamsFieldNumber = 1,
  };
  // string jsonParams = 1;
  void clear_jsonparams() ;
  const std::string& jsonparams() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_jsonparams(Arg_&& arg, Args_... args);
  std::string* mutable_jsonparams();
  PROTOBUF_NODISCARD std::string* release_jsonparams();
  void set_allocated_jsonparams(std::string* value);

  private:
  const std::string& _internal_jsonparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsonparams(
      const std::string& value);
  std::string* _internal_mutable_jsonparams();

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.JsonParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JsonParameters& from_msg);
    ::google::protobuf::internal::ArenaStringPtr jsonparams_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class CompanyUid final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.CompanyUid) */ {
 public:
  inline CompanyUid() : CompanyUid(nullptr) {}
  ~CompanyUid() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompanyUid* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompanyUid));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompanyUid(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompanyUid(const CompanyUid& from) : CompanyUid(nullptr, from) {}
  inline CompanyUid(CompanyUid&& from) noexcept
      : CompanyUid(nullptr, std::move(from)) {}
  inline CompanyUid& operator=(const CompanyUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyUid& operator=(CompanyUid&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyUid& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyUid* internal_default_instance() {
    return reinterpret_cast<const CompanyUid*>(
        &_CompanyUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CompanyUid& a, CompanyUid& b) { a.Swap(&b); }
  inline void Swap(CompanyUid* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyUid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompanyUid* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompanyUid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompanyUid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompanyUid& from) { CompanyUid::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompanyUid* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.CompanyUid"; }

 protected:
  explicit CompanyUid(::google::protobuf::Arena* arena);
  CompanyUid(::google::protobuf::Arena* arena, const CompanyUid& from);
  CompanyUid(::google::protobuf::Arena* arena, CompanyUid&& from) noexcept
      : CompanyUid(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUidFieldNumber = 1,
  };
  // string uid = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.CompanyUid)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompanyUid& from_msg);
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class CompanyResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.CompanyResult) */ {
 public:
  inline CompanyResult() : CompanyResult(nullptr) {}
  ~CompanyResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompanyResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompanyResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompanyResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompanyResult(const CompanyResult& from) : CompanyResult(nullptr, from) {}
  inline CompanyResult(CompanyResult&& from) noexcept
      : CompanyResult(nullptr, std::move(from)) {}
  inline CompanyResult& operator=(const CompanyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyResult& operator=(CompanyResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyResult* internal_default_instance() {
    return reinterpret_cast<const CompanyResult*>(
        &_CompanyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CompanyResult& a, CompanyResult& b) { a.Swap(&b); }
  inline void Swap(CompanyResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompanyResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompanyResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompanyResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompanyResult& from) { CompanyResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompanyResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.CompanyResult"; }

 protected:
  explicit CompanyResult(::google::protobuf::Arena* arena);
  CompanyResult(::google::protobuf::Arena* arena, const CompanyResult& from);
  CompanyResult(::google::protobuf::Arena* arena, CompanyResult&& from) noexcept
      : CompanyResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 2,
    kUidFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // string uid = 3;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.CompanyResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompanyResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class Company final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.Company) */ {
 public:
  inline Company() : Company(nullptr) {}
  ~Company() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Company* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Company));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Company(
      ::google::protobuf::internal::ConstantInitialized);

  inline Company(const Company& from) : Company(nullptr, from) {}
  inline Company(Company&& from) noexcept
      : Company(nullptr, std::move(from)) {}
  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  inline Company& operator=(Company&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Company& default_instance() {
    return *internal_default_instance();
  }
  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
        &_Company_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Company& a, Company& b) { a.Swap(&b); }
  inline void Swap(Company* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Company* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Company* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Company>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Company& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Company& from) { Company::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Company* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.Company"; }

 protected:
  explicit Company(::google::protobuf::Arena* arena);
  Company(::google::protobuf::Arena* arena, const Company& from);
  Company(::google::protobuf::Arena* arena, Company&& from) noexcept
      : Company(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUIDFieldNumber = 1,
    kNAMEFieldNumber = 4,
    kADDRESSFieldNumber = 5,
    kLICENSEFieldNumber = 8,
    kLOGOFieldNumber = 19,
    kSERVERUIDFieldNumber = 2,
    kCOMPANYTYPEFieldNumber = 3,
    kREGDATEFieldNumber = 6,
    kJOINTDATEFieldNumber = 7,
  };
  // string UID = 1;
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string NAME = 4;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string ADDRESS = 5;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string LICENSE = 8;
  void clear_license() ;
  const std::string& license() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_license(Arg_&& arg, Args_... args);
  std::string* mutable_license();
  PROTOBUF_NODISCARD std::string* release_license();
  void set_allocated_license(std::string* value);

  private:
  const std::string& _internal_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license(
      const std::string& value);
  std::string* _internal_mutable_license();

  public:
  // bytes LOGO = 19;
  void clear_logo() ;
  const std::string& logo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logo(Arg_&& arg, Args_... args);
  std::string* mutable_logo();
  PROTOBUF_NODISCARD std::string* release_logo();
  void set_allocated_logo(std::string* value);

  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(
      const std::string& value);
  std::string* _internal_mutable_logo();

  public:
  // uint32 SERVER_UID = 2;
  void clear_server_uid() ;
  ::uint32_t server_uid() const;
  void set_server_uid(::uint32_t value);

  private:
  ::uint32_t _internal_server_uid() const;
  void _internal_set_server_uid(::uint32_t value);

  public:
  // uint32 COMPANY_TYPE = 3;
  void clear_company_type() ;
  ::uint32_t company_type() const;
  void set_company_type(::uint32_t value);

  private:
  ::uint32_t _internal_company_type() const;
  void _internal_set_company_type(::uint32_t value);

  public:
  // int64 REG_DATE = 6;
  void clear_reg_date() ;
  ::int64_t reg_date() const;
  void set_reg_date(::int64_t value);

  private:
  ::int64_t _internal_reg_date() const;
  void _internal_set_reg_date(::int64_t value);

  public:
  // int64 JOINT_DATE = 7;
  void clear_joint_date() ;
  ::int64_t joint_date() const;
  void set_joint_date(::int64_t value);

  private:
  ::int64_t _internal_joint_date() const;
  void _internal_set_joint_date(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CompanyEdit.Company)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Company& from_msg);
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr license_;
    ::google::protobuf::internal::ArenaStringPtr logo_;
    ::uint32_t server_uid_;
    ::uint32_t company_type_;
    ::int64_t reg_date_;
    ::int64_t joint_date_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};
// -------------------------------------------------------------------

class CompanyList final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CompanyEdit.CompanyList) */ {
 public:
  inline CompanyList() : CompanyList(nullptr) {}
  ~CompanyList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompanyList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompanyList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompanyList(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompanyList(const CompanyList& from) : CompanyList(nullptr, from) {}
  inline CompanyList(CompanyList&& from) noexcept
      : CompanyList(nullptr, std::move(from)) {}
  inline CompanyList& operator=(const CompanyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyList& operator=(CompanyList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyList* internal_default_instance() {
    return reinterpret_cast<const CompanyList*>(
        &_CompanyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CompanyList& a, CompanyList& b) { a.Swap(&b); }
  inline void Swap(CompanyList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompanyList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompanyList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompanyList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompanyList& from) { CompanyList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompanyList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CompanyEdit.CompanyList"; }

 protected:
  explicit CompanyList(::google::protobuf::Arena* arena);
  CompanyList(::google::protobuf::Arena* arena, const CompanyList& from);
  CompanyList(::google::protobuf::Arena* arena, CompanyList&& from) noexcept
      : CompanyList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCompaniesFieldNumber = 1,
  };
  // repeated .CompanyEdit.Company companies = 1;
  int companies_size() const;
  private:
  int _internal_companies_size() const;

  public:
  void clear_companies() ;
  ::CompanyEdit::Company* mutable_companies(int index);
  ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>* mutable_companies();

  private:
  const ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>& _internal_companies() const;
  ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>* _internal_mutable_companies();
  public:
  const ::CompanyEdit::Company& companies(int index) const;
  ::CompanyEdit::Company* add_companies();
  const ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>& companies() const;
  // @@protoc_insertion_point(class_scope:CompanyEdit.CompanyList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompanyList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::CompanyEdit::Company > companies_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_company_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Company

// string UID = 1;
inline void Company::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& Company::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.UID)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Company::set_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.UID)
}
inline std::string* Company::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.Company.UID)
  return _s;
}
inline const std::string& Company::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_.Get();
}
inline void Company::_internal_set_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* Company::_internal_mutable_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* Company::release_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.Company.UID)
  return _impl_.uid_.Release();
}
inline void Company::set_allocated_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.Company.UID)
}

// uint32 SERVER_UID = 2;
inline void Company::clear_server_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_uid_ = 0u;
}
inline ::uint32_t Company::server_uid() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.SERVER_UID)
  return _internal_server_uid();
}
inline void Company::set_server_uid(::uint32_t value) {
  _internal_set_server_uid(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.SERVER_UID)
}
inline ::uint32_t Company::_internal_server_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_uid_;
}
inline void Company::_internal_set_server_uid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_uid_ = value;
}

// uint32 COMPANY_TYPE = 3;
inline void Company::clear_company_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_type_ = 0u;
}
inline ::uint32_t Company::company_type() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.COMPANY_TYPE)
  return _internal_company_type();
}
inline void Company::set_company_type(::uint32_t value) {
  _internal_set_company_type(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.COMPANY_TYPE)
}
inline ::uint32_t Company::_internal_company_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.company_type_;
}
inline void Company::_internal_set_company_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_type_ = value;
}

// string NAME = 4;
inline void Company::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Company::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.NAME)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Company::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.NAME)
}
inline std::string* Company::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.Company.NAME)
  return _s;
}
inline const std::string& Company::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Company::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Company::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Company::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.Company.NAME)
  return _impl_.name_.Release();
}
inline void Company::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.Company.NAME)
}

// string ADDRESS = 5;
inline void Company::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Company::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.ADDRESS)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Company::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.ADDRESS)
}
inline std::string* Company::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.Company.ADDRESS)
  return _s;
}
inline const std::string& Company::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Company::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Company::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Company::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.Company.ADDRESS)
  return _impl_.address_.Release();
}
inline void Company::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.Company.ADDRESS)
}

// int64 REG_DATE = 6;
inline void Company::clear_reg_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reg_date_ = ::int64_t{0};
}
inline ::int64_t Company::reg_date() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.REG_DATE)
  return _internal_reg_date();
}
inline void Company::set_reg_date(::int64_t value) {
  _internal_set_reg_date(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.REG_DATE)
}
inline ::int64_t Company::_internal_reg_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reg_date_;
}
inline void Company::_internal_set_reg_date(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reg_date_ = value;
}

// int64 JOINT_DATE = 7;
inline void Company::clear_joint_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joint_date_ = ::int64_t{0};
}
inline ::int64_t Company::joint_date() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.JOINT_DATE)
  return _internal_joint_date();
}
inline void Company::set_joint_date(::int64_t value) {
  _internal_set_joint_date(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.JOINT_DATE)
}
inline ::int64_t Company::_internal_joint_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joint_date_;
}
inline void Company::_internal_set_joint_date(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joint_date_ = value;
}

// string LICENSE = 8;
inline void Company::clear_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_.ClearToEmpty();
}
inline const std::string& Company::license() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.LICENSE)
  return _internal_license();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Company::set_license(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.LICENSE)
}
inline std::string* Company::mutable_license() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_license();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.Company.LICENSE)
  return _s;
}
inline const std::string& Company::_internal_license() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.license_.Get();
}
inline void Company::_internal_set_license(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_.Set(value, GetArena());
}
inline std::string* Company::_internal_mutable_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.license_.Mutable( GetArena());
}
inline std::string* Company::release_license() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.Company.LICENSE)
  return _impl_.license_.Release();
}
inline void Company::set_allocated_license(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.license_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.license_.IsDefault()) {
    _impl_.license_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.Company.LICENSE)
}

// bytes LOGO = 19;
inline void Company::clear_logo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logo_.ClearToEmpty();
}
inline const std::string& Company::logo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.Company.LOGO)
  return _internal_logo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Company::set_logo(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logo_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.Company.LOGO)
}
inline std::string* Company::mutable_logo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.Company.LOGO)
  return _s;
}
inline const std::string& Company::_internal_logo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logo_.Get();
}
inline void Company::_internal_set_logo(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logo_.Set(value, GetArena());
}
inline std::string* Company::_internal_mutable_logo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.logo_.Mutable( GetArena());
}
inline std::string* Company::release_logo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.Company.LOGO)
  return _impl_.logo_.Release();
}
inline void Company::set_allocated_logo(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logo_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logo_.IsDefault()) {
    _impl_.logo_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.Company.LOGO)
}

// -------------------------------------------------------------------

// CompanyResult

// bool success = 1;
inline void CompanyResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CompanyResult::success() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.CompanyResult.success)
  return _internal_success();
}
inline void CompanyResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.CompanyResult.success)
}
inline bool CompanyResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CompanyResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error = 2;
inline void CompanyResult::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& CompanyResult::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.CompanyResult.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompanyResult::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.CompanyResult.error)
}
inline std::string* CompanyResult::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.CompanyResult.error)
  return _s;
}
inline const std::string& CompanyResult::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void CompanyResult::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* CompanyResult::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* CompanyResult::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.CompanyResult.error)
  return _impl_.error_.Release();
}
inline void CompanyResult::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.CompanyResult.error)
}

// string uid = 3;
inline void CompanyResult::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CompanyResult::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.CompanyResult.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompanyResult::set_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.CompanyResult.uid)
}
inline std::string* CompanyResult::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.CompanyResult.uid)
  return _s;
}
inline const std::string& CompanyResult::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_.Get();
}
inline void CompanyResult::_internal_set_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* CompanyResult::_internal_mutable_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* CompanyResult::release_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.CompanyResult.uid)
  return _impl_.uid_.Release();
}
inline void CompanyResult::set_allocated_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.CompanyResult.uid)
}

// -------------------------------------------------------------------

// CompanyList

// repeated .CompanyEdit.Company companies = 1;
inline int CompanyList::_internal_companies_size() const {
  return _internal_companies().size();
}
inline int CompanyList::companies_size() const {
  return _internal_companies_size();
}
inline void CompanyList::clear_companies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.companies_.Clear();
}
inline ::CompanyEdit::Company* CompanyList::mutable_companies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CompanyEdit.CompanyList.companies)
  return _internal_mutable_companies()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>* CompanyList::mutable_companies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CompanyEdit.CompanyList.companies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_companies();
}
inline const ::CompanyEdit::Company& CompanyList::companies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.CompanyList.companies)
  return _internal_companies().Get(index);
}
inline ::CompanyEdit::Company* CompanyList::add_companies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::CompanyEdit::Company* _add = _internal_mutable_companies()->Add();
  // @@protoc_insertion_point(field_add:CompanyEdit.CompanyList.companies)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>& CompanyList::companies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CompanyEdit.CompanyList.companies)
  return _internal_companies();
}
inline const ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>&
CompanyList::_internal_companies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.companies_;
}
inline ::google::protobuf::RepeatedPtrField<::CompanyEdit::Company>*
CompanyList::_internal_mutable_companies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.companies_;
}

// -------------------------------------------------------------------

// JsonParameters

// string jsonParams = 1;
inline void JsonParameters::clear_jsonparams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jsonparams_.ClearToEmpty();
}
inline const std::string& JsonParameters::jsonparams() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.JsonParameters.jsonParams)
  return _internal_jsonparams();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JsonParameters::set_jsonparams(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jsonparams_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.JsonParameters.jsonParams)
}
inline std::string* JsonParameters::mutable_jsonparams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_jsonparams();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.JsonParameters.jsonParams)
  return _s;
}
inline const std::string& JsonParameters::_internal_jsonparams() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jsonparams_.Get();
}
inline void JsonParameters::_internal_set_jsonparams(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jsonparams_.Set(value, GetArena());
}
inline std::string* JsonParameters::_internal_mutable_jsonparams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.jsonparams_.Mutable( GetArena());
}
inline std::string* JsonParameters::release_jsonparams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.JsonParameters.jsonParams)
  return _impl_.jsonparams_.Release();
}
inline void JsonParameters::set_allocated_jsonparams(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jsonparams_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.jsonparams_.IsDefault()) {
    _impl_.jsonparams_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.JsonParameters.jsonParams)
}

// -------------------------------------------------------------------

// CompanyUid

// string uid = 1;
inline void CompanyUid::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CompanyUid::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CompanyEdit.CompanyUid.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompanyUid::set_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CompanyEdit.CompanyUid.uid)
}
inline std::string* CompanyUid::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:CompanyEdit.CompanyUid.uid)
  return _s;
}
inline const std::string& CompanyUid::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_.Get();
}
inline void CompanyUid::_internal_set_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* CompanyUid::_internal_mutable_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* CompanyUid::release_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CompanyEdit.CompanyUid.uid)
  return _impl_.uid_.Release();
}
inline void CompanyUid::set_allocated_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CompanyEdit.CompanyUid.uid)
}

// -------------------------------------------------------------------

// TotalCount

// uint64 count = 1;
inline void TotalCount::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t TotalCount::count() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.TotalCount.count)
  return _internal_count();
}
inline void TotalCount::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.TotalCount.count)
}
inline ::uint64_t TotalCount::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void TotalCount::_internal_set_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// ServerUid

// uint32 uid = 1;
inline void ServerUid::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = 0u;
}
inline ::uint32_t ServerUid::uid() const {
  // @@protoc_insertion_point(field_get:CompanyEdit.ServerUid.uid)
  return _internal_uid();
}
inline void ServerUid::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:CompanyEdit.ServerUid.uid)
}
inline ::uint32_t ServerUid::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_;
}
inline void ServerUid::_internal_set_uid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace CompanyEdit


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // company_2eproto_2epb_2eh
