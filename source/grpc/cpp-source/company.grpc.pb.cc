// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: company.proto

#include "company.pb.h"
#include "company.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace CompanyEdit {

static const char* CompanyEditor_method_names[] = {
  "/CompanyEdit.CompanyEditor/AddCompany",
  "/CompanyEdit.CompanyEditor/EditCompany",
  "/CompanyEdit.CompanyEditor/DeleteCompany",
  "/CompanyEdit.CompanyEditor/QueryCompanies",
  "/CompanyEdit.CompanyEditor/QueryCompanyByUid",
};

std::unique_ptr< CompanyEditor::Stub> CompanyEditor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CompanyEditor::Stub> stub(new CompanyEditor::Stub(channel, options));
  return stub;
}

CompanyEditor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddCompany_(CompanyEditor_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditCompany_(CompanyEditor_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCompany_(CompanyEditor_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryCompanies_(CompanyEditor_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryCompanyByUid_(CompanyEditor_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CompanyEditor::Stub::AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCompany_, context, request, response);
}

void CompanyEditor::Stub::async::AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCompany_, context, request, response, std::move(f));
}

void CompanyEditor::Stub::async::AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCompany_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::PrepareAsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CompanyEdit::CompanyResult, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCompany_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::AsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCompanyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CompanyEditor::Stub::EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditCompany_, context, request, response);
}

void CompanyEditor::Stub::async::EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCompany_, context, request, response, std::move(f));
}

void CompanyEditor::Stub::async::EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCompany_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::PrepareAsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CompanyEdit::CompanyResult, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditCompany_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::AsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditCompanyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CompanyEditor::Stub::DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCompany_, context, request, response);
}

void CompanyEditor::Stub::async::DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCompany_, context, request, response, std::move(f));
}

void CompanyEditor::Stub::async::DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCompany_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::PrepareAsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CompanyEdit::CompanyResult, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCompany_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* CompanyEditor::Stub::AsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCompanyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CompanyEditor::Stub::QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::CompanyEdit::CompanyList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryCompanies_, context, request, response);
}

void CompanyEditor::Stub::async::QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryCompanies_, context, request, response, std::move(f));
}

void CompanyEditor::Stub::async::QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryCompanies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>* CompanyEditor::Stub::PrepareAsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CompanyEdit::CompanyList, ::CompanyEdit::XmlParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryCompanies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>* CompanyEditor::Stub::AsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryCompaniesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CompanyEditor::Stub::QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::CompanyEdit::Company* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CompanyEdit::CompanyUid, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryCompanyByUid_, context, request, response);
}

void CompanyEditor::Stub::async::QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CompanyEdit::CompanyUid, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryCompanyByUid_, context, request, response, std::move(f));
}

void CompanyEditor::Stub::async::QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryCompanyByUid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>* CompanyEditor::Stub::PrepareAsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CompanyEdit::Company, ::CompanyEdit::CompanyUid, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryCompanyByUid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>* CompanyEditor::Stub::AsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryCompanyByUidRaw(context, request, cq);
  result->StartCall();
  return result;
}

CompanyEditor::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompanyEditor_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompanyEditor::Service, ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompanyEditor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompanyEdit::Company* req,
             ::CompanyEdit::CompanyResult* resp) {
               return service->AddCompany(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompanyEditor_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompanyEditor::Service, ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompanyEditor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompanyEdit::Company* req,
             ::CompanyEdit::CompanyResult* resp) {
               return service->EditCompany(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompanyEditor_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompanyEditor::Service, ::CompanyEdit::Company, ::CompanyEdit::CompanyResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompanyEditor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompanyEdit::Company* req,
             ::CompanyEdit::CompanyResult* resp) {
               return service->DeleteCompany(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompanyEditor_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompanyEditor::Service, ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompanyEditor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompanyEdit::XmlParameters* req,
             ::CompanyEdit::CompanyList* resp) {
               return service->QueryCompanies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompanyEditor_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompanyEditor::Service, ::CompanyEdit::CompanyUid, ::CompanyEdit::Company, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CompanyEditor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CompanyEdit::CompanyUid* req,
             ::CompanyEdit::Company* resp) {
               return service->QueryCompanyByUid(ctx, req, resp);
             }, this)));
}

CompanyEditor::Service::~Service() {
}

::grpc::Status CompanyEditor::Service::AddCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompanyEditor::Service::EditCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompanyEditor::Service::DeleteCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompanyEditor::Service::QueryCompanies(::grpc::ServerContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompanyEditor::Service::QueryCompanyByUid(::grpc::ServerContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CompanyEdit

