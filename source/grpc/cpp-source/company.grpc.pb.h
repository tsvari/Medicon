// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: company.proto
#ifndef GRPC_company_2eproto__INCLUDED
#define GRPC_company_2eproto__INCLUDED

#include "company.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace CompanyEdit {

// Interface exported by the server.
class CompanyEditor final {
 public:
  static constexpr char const* service_full_name() {
    return "CompanyEdit.CompanyEditor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> AsyncAddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(AsyncAddCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> PrepareAsyncAddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(PrepareAsyncAddCompanyRaw(context, request, cq));
    }
    virtual ::grpc::Status EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> AsyncEditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(AsyncEditCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> PrepareAsyncEditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(PrepareAsyncEditCompanyRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> AsyncDeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(AsyncDeleteCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>> PrepareAsyncDeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>>(PrepareAsyncDeleteCompanyRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::CompanyEdit::CompanyList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>> AsyncQueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>>(AsyncQueryCompaniesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>> PrepareAsyncQueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>>(PrepareAsyncQueryCompaniesRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::CompanyEdit::Company* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>> AsyncQueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>>(AsyncQueryCompanyByUidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>> PrepareAsyncQueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>>(PrepareAsyncQueryCompanyByUidRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* AsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* PrepareAsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* AsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* PrepareAsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* AsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyResult>* PrepareAsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>* AsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::CompanyList>* PrepareAsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>* AsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CompanyEdit::Company>* PrepareAsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> AsyncAddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(AsyncAddCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> PrepareAsyncAddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(PrepareAsyncAddCompanyRaw(context, request, cq));
    }
    ::grpc::Status EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> AsyncEditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(AsyncEditCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> PrepareAsyncEditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(PrepareAsyncEditCompanyRaw(context, request, cq));
    }
    ::grpc::Status DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::CompanyEdit::CompanyResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> AsyncDeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(AsyncDeleteCompanyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>> PrepareAsyncDeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>>(PrepareAsyncDeleteCompanyRaw(context, request, cq));
    }
    ::grpc::Status QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::CompanyEdit::CompanyList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>> AsyncQueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>>(AsyncQueryCompaniesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>> PrepareAsyncQueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>>(PrepareAsyncQueryCompaniesRaw(context, request, cq));
    }
    ::grpc::Status QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::CompanyEdit::Company* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>> AsyncQueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>>(AsyncQueryCompanyByUidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>> PrepareAsyncQueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>>(PrepareAsyncQueryCompanyByUidRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) override;
      void AddCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) override;
      void EditCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, std::function<void(::grpc::Status)>) override;
      void DeleteCompany(::grpc::ClientContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, std::function<void(::grpc::Status)>) override;
      void QueryCompanies(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, std::function<void(::grpc::Status)>) override;
      void QueryCompanyByUid(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* AsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* PrepareAsyncAddCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* AsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* PrepareAsyncEditCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* AsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyResult>* PrepareAsyncDeleteCompanyRaw(::grpc::ClientContext* context, const ::CompanyEdit::Company& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>* AsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::CompanyList>* PrepareAsyncQueryCompaniesRaw(::grpc::ClientContext* context, const ::CompanyEdit::XmlParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>* AsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CompanyEdit::Company>* PrepareAsyncQueryCompanyByUidRaw(::grpc::ClientContext* context, const ::CompanyEdit::CompanyUid& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddCompany_;
    const ::grpc::internal::RpcMethod rpcmethod_EditCompany_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCompany_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryCompanies_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryCompanyByUid_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response);
    virtual ::grpc::Status EditCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response);
    virtual ::grpc::Status DeleteCompany(::grpc::ServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response);
    virtual ::grpc::Status QueryCompanies(::grpc::ServerContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response);
    virtual ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCompany() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCompany(::grpc::ServerContext* context, ::CompanyEdit::Company* request, ::grpc::ServerAsyncResponseWriter< ::CompanyEdit::CompanyResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditCompany() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCompany(::grpc::ServerContext* context, ::CompanyEdit::Company* request, ::grpc::ServerAsyncResponseWriter< ::CompanyEdit::CompanyResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCompany(::grpc::ServerContext* context, ::CompanyEdit::Company* request, ::grpc::ServerAsyncResponseWriter< ::CompanyEdit::CompanyResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryCompanies(::grpc::ServerContext* context, ::CompanyEdit::XmlParameters* request, ::grpc::ServerAsyncResponseWriter< ::CompanyEdit::CompanyList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryCompanyByUid(::grpc::ServerContext* context, ::CompanyEdit::CompanyUid* request, ::grpc::ServerAsyncResponseWriter< ::CompanyEdit::Company>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddCompany<WithAsyncMethod_EditCompany<WithAsyncMethod_DeleteCompany<WithAsyncMethod_QueryCompanies<WithAsyncMethod_QueryCompanyByUid<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCompany() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) { return this->AddCompany(context, request, response); }));}
    void SetMessageAllocatorFor_AddCompany(
        ::grpc::MessageAllocator< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditCompany() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) { return this->EditCompany(context, request, response); }));}
    void SetMessageAllocatorFor_EditCompany(
        ::grpc::MessageAllocator< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CompanyEdit::Company* request, ::CompanyEdit::CompanyResult* response) { return this->DeleteCompany(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCompany(
        ::grpc::MessageAllocator< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CompanyEdit::XmlParameters* request, ::CompanyEdit::CompanyList* response) { return this->QueryCompanies(context, request, response); }));}
    void SetMessageAllocatorFor_QueryCompanies(
        ::grpc::MessageAllocator< ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryCompanies(
      ::grpc::CallbackServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::CompanyUid, ::CompanyEdit::Company>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CompanyEdit::CompanyUid* request, ::CompanyEdit::Company* response) { return this->QueryCompanyByUid(context, request, response); }));}
    void SetMessageAllocatorFor_QueryCompanyByUid(
        ::grpc::MessageAllocator< ::CompanyEdit::CompanyUid, ::CompanyEdit::Company>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CompanyEdit::CompanyUid, ::CompanyEdit::Company>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryCompanyByUid(
      ::grpc::CallbackServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddCompany<WithCallbackMethod_EditCompany<WithCallbackMethod_DeleteCompany<WithCallbackMethod_QueryCompanies<WithCallbackMethod_QueryCompanyByUid<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCompany() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditCompany() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCompany() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCompany(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditCompany() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCompany(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCompany(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryCompanies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryCompanyByUid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCompany() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCompany(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditCompany() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditCompany(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCompany(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCompany(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryCompanies(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryCompanies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryCompanyByUid(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryCompanyByUid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCompany() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* streamer) {
                       return this->StreamedAddCompany(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCompany(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CompanyEdit::Company,::CompanyEdit::CompanyResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditCompany() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* streamer) {
                       return this->StreamedEditCompany(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditCompany(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CompanyEdit::Company,::CompanyEdit::CompanyResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCompany : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCompany() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CompanyEdit::Company, ::CompanyEdit::CompanyResult>* streamer) {
                       return this->StreamedDeleteCompany(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCompany() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCompany(::grpc::ServerContext* /*context*/, const ::CompanyEdit::Company* /*request*/, ::CompanyEdit::CompanyResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCompany(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CompanyEdit::Company,::CompanyEdit::CompanyResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryCompanies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryCompanies() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CompanyEdit::XmlParameters, ::CompanyEdit::CompanyList>* streamer) {
                       return this->StreamedQueryCompanies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryCompanies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryCompanies(::grpc::ServerContext* /*context*/, const ::CompanyEdit::XmlParameters* /*request*/, ::CompanyEdit::CompanyList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryCompanies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CompanyEdit::XmlParameters,::CompanyEdit::CompanyList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryCompanyByUid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryCompanyByUid() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CompanyEdit::CompanyUid, ::CompanyEdit::Company>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CompanyEdit::CompanyUid, ::CompanyEdit::Company>* streamer) {
                       return this->StreamedQueryCompanyByUid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryCompanyByUid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryCompanyByUid(::grpc::ServerContext* /*context*/, const ::CompanyEdit::CompanyUid* /*request*/, ::CompanyEdit::Company* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryCompanyByUid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CompanyEdit::CompanyUid,::CompanyEdit::Company>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddCompany<WithStreamedUnaryMethod_EditCompany<WithStreamedUnaryMethod_DeleteCompany<WithStreamedUnaryMethod_QueryCompanies<WithStreamedUnaryMethod_QueryCompanyByUid<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddCompany<WithStreamedUnaryMethod_EditCompany<WithStreamedUnaryMethod_DeleteCompany<WithStreamedUnaryMethod_QueryCompanies<WithStreamedUnaryMethod_QueryCompanyByUid<Service > > > > > StreamedService;
};

}  // namespace CompanyEdit


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_company_2eproto__INCLUDED
